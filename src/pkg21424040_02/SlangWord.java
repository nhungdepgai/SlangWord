/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pkg21424040_02;

import java.awt.Button;
import java.awt.Font;
import java.awt.Label;
import java.awt.Rectangle;
import java.awt.ScrollPane;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.Writer;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableModel;
import java.util.Random;

/**
 *
 * @author Administrator
 */
public class SlangWord extends javax.swing.JFrame {

    Vector<String> vtcHeader = new Vector();
    Vector<Vector> rowData = new Vector<>();
    Vector<Vector> tempData = new Vector<>();

    Vector<Vector> historyData = new Vector<>();

    public static DefaultTableModel model;
    Map<String, String> listTexts;

    /**
     * Creates new form SlangWords
     */
    public SlangWord() {
        initComponents();
//        JFrame jframe ;

        JScrollPane js = new JScrollPane(jTableSlangWord);
        js.setVisible(true);
        add(js);
//        jScrollPane1.getContainerListeners().length(jTableSlangWord);
        jTableSlangWord.setDefaultEditor(Object.class, null);
        listTexts = loadFileTxtx("E:\\__Nhung__\\21HCB-2022\\HKII\\LapTrinhUngDungJava\\BT\\21424040_73\\slang.txt");
        MapDataToTable(listTexts, jScrollPane1, jTableSlangWord);

    }

    public Boolean MapDataToTable(Map<String, String> map, JScrollPane jScrollPane, JTable jTable) {

        int i = 0;

        for (Map.Entry<String, String> m : map.entrySet()) {
            Vector<String> vtcData = new Vector();
            i++;

            vtcData.addElement(i + "");
            vtcData.addElement(m.getKey());
            vtcData.addElement(m.getValue());
            rowData.addElement(vtcData);
            tempData.addElement(vtcData);
        }
        vtcHeader.addElement("stt");
        vtcHeader.addElement("key");
        vtcHeader.addElement("value");

        jTable.setModel(new DefaultTableModel(tempData, vtcHeader));
        jScrollPane.setColumnHeaderView(jTable);

        return true;
    }

    public Map<String, String> loadFileTxtx(String url) {
        File file = new File(url);
        Map<String, String> listWords = new HashMap<>();
        try {
            System.out.println(url);
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                String[] arrLines = line.split("`");
                listWords.put(arrLines[0], arrLines[1]);
            }
            br.close();
            fr.close();
        } 
        catch (Exception e) {
            System.out.println("Load file failed!");
        }

        return listWords;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new Label();
        txtkeyWord = new TextField();
        btnSearchSlang = new Button();
        btnSearchDefinition = new Button();
        btnHistory = new Button();
        btnReset = new Button();
        btnRandom = new Button();
        label2 = new Label();
        txtSlang = new TextField();
        label3 = new Label();
        txtDefinition = new TextField();
        jScrollPane1 = new JScrollPane();
        jTableSlangWord = new JTable();
        jPanel1 = new JPanel();
        label4 = new Label();
        jRadioSlang = new JRadioButton();
        jRadioDefinition = new JRadioButton();
        btnAdd = new Button();
        btnEdit = new Button();
        btnDelete = new Button();
        btnExit = new Button();
        btnExport = new Button();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Slang word");
        setName("Form"); // NOI18N

        label1.setName("label1"); // NOI18N
        label1.setText("Key word :");

        txtkeyWord.setName("txtkeyWord"); // NOI18N

        btnSearchSlang.setLabel("Search Slang");
        btnSearchSlang.setName("btnSearchSlang"); // NOI18N
        btnSearchSlang.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnSearchSlangMouseClicked(evt);
            }
        });
        btnSearchSlang.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSearchSlangActionPerformed(evt);
            }
        });

        btnSearchDefinition.setLabel("Search definition");
        btnSearchDefinition.setName("btnSearchDefinition"); // NOI18N
        btnSearchDefinition.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSearchDefinitionActionPerformed(evt);
            }
        });

        btnHistory.setLabel("History");
        btnHistory.setName("btnHistory"); // NOI18N
        btnHistory.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });

        btnReset.setLabel("Reset");
        btnReset.setName("btnReset"); // NOI18N
        btnReset.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnRandom.setLabel("Random");
        btnRandom.setName("btnRandom"); // NOI18N
        btnRandom.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        label2.setName("label2"); // NOI18N
        label2.setText("Slang :");

        txtSlang.setName("txtSlang"); // NOI18N

        label3.setName("label3"); // NOI18N
        label3.setText("Definition :");

        txtDefinition.setName("txtDefinition"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableSlangWord.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableSlangWord.setName("jTableSlangWord"); // NOI18N
        jTableSlangWord.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTableSlangWordMouseClicked(evt);
            }
        });
        jTableSlangWord.addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                jTableSlangWordComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(jTableSlangWord);

        jPanel1.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        jPanel1.setName("jPanel1"); // NOI18N

        label4.setFont(new Font("DialogInput", 1, 24)); // NOI18N
        label4.setName(""); // NOI18N
        label4.setText("ĐỐ VUI:");

        jRadioSlang.setText("SLANG");
        jRadioSlang.setName("jRadioSlang"); // NOI18N

        jRadioDefinition.setText("DEFINITION");
        jRadioDefinition.setName("jRadioDefinition"); // NOI18N
        jRadioDefinition.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioDefinitionActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(label4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(jRadioSlang)
                .addGap(68, 68, 68)
                .addComponent(jRadioDefinition)
                .addGap(70, 70, 70))
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(label4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioSlang)
                    .addComponent(jRadioDefinition))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAdd.setLabel("Add");
        btnAdd.setName("btnAdd"); // NOI18N
        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setLabel("Edit");
        btnEdit.setName("btnEdit"); // NOI18N
        btnEdit.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnEditMouseClicked(evt);
            }
        });
        btnEdit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setLabel("Delete");
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setLabel("Exit");
        btnExit.setName("btnExit"); // NOI18N
        btnExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnExport.setLabel("Save");
        btnExport.setName("btnExport"); // NOI18N
        btnExport.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtkeyWord, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(txtSlang, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDefinition, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(btnSearchSlang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSearchDefinition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(btnDelete, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(btnEdit, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)))
                                .addGap(38, 38, 38)
                                .addComponent(btnExit, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(btnHistory, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(btnReset, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(btnRandom, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(btnExport, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)))))
                .addGap(21, 21, 21)
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(txtkeyWord, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(label1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchDefinition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchSlang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(label2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSlang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(label3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDefinition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDelete, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEdit, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHistory, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnReset, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnExport, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 369, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRandom, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioDefinitionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioDefinitionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioDefinitionActionPerformed
    private void ClearText() {
        txtSlang.setText("");
        txtDefinition.setText("");
    }
    private void btnAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
//        Vector row = new Vector();
//        row.add(txtSlang.getText());
//        row.add(txtDefinition.getText());
        DefaultTableModel rs = (DefaultTableModel) jTableSlangWord.getModel();

        Vector<String> vtcData = new Vector();
        int newIndex = tempData.size() + 1;
        vtcData.addElement(Integer.toString(newIndex));
        vtcData.addElement(txtSlang.getText());
        vtcData.addElement(txtDefinition.getText());
        tempData.addElement(vtcData);

        rs.fireTableDataChanged();// time faster

        //listTexts.put(txtSlang.getText(), txtDefinition.getText());
        //jTable.setModel(new DefaultTableModel(rowData,vtcHeader));
        //vtcData.add(row);
        //jTableSlangWord.setModel(new DefaultTableModel(vtcData,vtcHeader));  
        ClearText();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnResetActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        DefaultTableModel rs = (DefaultTableModel) jTableSlangWord.getModel();
        tempData = (Vector) rowData.clone();
        jTableSlangWord.setModel(new DefaultTableModel(tempData, vtcHeader));
        rs.fireTableDataChanged();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(jScrollPane1,
                "Are you sure you want to close this window?", "Close Window?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void jTableSlangWordComponentShown(ComponentEvent evt) {//GEN-FIRST:event_jTableSlangWordComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_jTableSlangWordComponentShown

    private void btnExportActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed

        rowData.clear();
        rowData.addAll(tempData);

        Writer writer = null;

        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream("E:\\__Nhung__\\21HCB-2022\\LapTrinhUngDungJava\\BT\\21424040_02\\test.txt"), "utf-8"));
            String res = "";
            for (int i = 0; i < rowData.size(); i++) {
                res += rowData.get(i).get(1) + "`" + rowData.get(i).get(2) + "\n";
            }
            writer.write(res);
        } catch (Exception ex) {
            // Report
        } finally {
            try {
                writer.close();
            } catch (Exception ex) {/*ignore*/
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnDeleteActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        int selectedOption = JOptionPane.showConfirmDialog(this, "Do you want to delete ? ");
        if (selectedOption == JOptionPane.OK_OPTION) {
            DefaultTableModel rs = (DefaultTableModel) jTableSlangWord.getModel();
//            Vector<String> vtcData = new Vector

            int rowIndex = jTableSlangWord.getSelectedRow();
            tempData.removeElementAt(rowIndex);

            Vector<String> vtcData = new Vector();
            int newIndex = tempData.size() - 1;
            vtcData.addElement(Integer.toString(newIndex));
            vtcData.addElement(txtSlang.getText());
            vtcData.addElement(txtDefinition.getText());
            tempData.addElement(vtcData);

            rs.fireTableDataChanged();
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnEditMouseClicked
        DefaultTableModel rs = (DefaultTableModel) jTableSlangWord.getModel();

        int rowIndex = jTableSlangWord.getSelectedRow();

        Vector<String> vtcData = new Vector();
        vtcData.addElement(rowIndex + 1 + "");
        vtcData.addElement(txtSlang.getText());
        vtcData.addElement(txtDefinition.getText());

        tempData.removeElementAt(rowIndex);
        tempData.insertElementAt(vtcData, rowIndex);

        rs.fireTableDataChanged();

    }//GEN-LAST:event_btnEditMouseClicked

    private void jTableSlangWordMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jTableSlangWordMouseClicked
        // TODO add your handling code here:
        // double click jtable to edit line 
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            //handle double click event.
            int rowIndex = jTableSlangWord.getSelectedRow();
            txtSlang.setText(tempData.get(rowIndex).elementAt(1).toString());
            txtDefinition.setText(tempData.get(rowIndex).elementAt(2).toString());
//            txtDefinition.setText("max");
        }
    }//GEN-LAST:event_jTableSlangWordMouseClicked

    private void btnHistoryActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        DefaultTableModel originalTableModel = (DefaultTableModel) jTableSlangWord.getModel();

        tempData.clear();
        tempData.addAll(historyData);

        originalTableModel.fireTableDataChanged();// time faster
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHistoryActionPerformed

    private void btnEditActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSearchSlangActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSearchSlangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchSlangActionPerformed


    private void btnSearchSlangMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnSearchSlangMouseClicked
        DefaultTableModel originalTableModel = (DefaultTableModel) jTableSlangWord.getModel();
        //To empty the  before search

        Vector<Vector> searchRes = new Vector<>();

        for (Object rows : originalTableModel.getDataVector()) {
            Vector rowVector = (Vector) rows;
            if (((String) rowVector.get(1)).toLowerCase().contains(txtkeyWord.getText().toLowerCase())) {
                searchRes.add(rowVector);
            }
        }

        tempData.clear();
        tempData.addAll(searchRes);

        Vector<String> vtcData = new Vector();
        vtcData.addElement(historyData.size() + 1 + "");
        vtcData.addElement(txtkeyWord.getText().toLowerCase());
        vtcData.addElement("");
        historyData.add(vtcData);

        originalTableModel.fireTableDataChanged();// time faster
    }//GEN-LAST:event_btnSearchSlangMouseClicked

    private void btnSearchDefinitionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSearchDefinitionActionPerformed
        DefaultTableModel originalTableModel = (DefaultTableModel) jTableSlangWord.getModel();
        //To empty the  before search

        Vector<Vector> searchRes = new Vector<>();

        for (Object rows : originalTableModel.getDataVector()) {
            Vector rowVector = (Vector) rows;
            if (((String) rowVector.get(2)).toLowerCase().contains(txtkeyWord.getText().toLowerCase())) {
                searchRes.add(rowVector);
            }
        }

        tempData.clear();
        tempData.addAll(searchRes);

        Vector<String> vtcData = new Vector();
        vtcData.addElement(historyData.size() + 1 + "");
        vtcData.addElement(txtkeyWord.getText().toLowerCase());
        vtcData.addElement("");
        historyData.add(vtcData);

        originalTableModel.fireTableDataChanged();// time faster
    }//GEN-LAST:event_btnSearchDefinitionActionPerformed

    private void btnRandomActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        DefaultTableModel originalTableModel = (DefaultTableModel) jTableSlangWord.getModel();

        Random ran = new Random();
        int index = ran.nextInt(tempData.size());
        jTableSlangWord.changeSelection(index, 0, false, false);
    }//GEN-LAST:event_btnRandomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SlangWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SlangWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SlangWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SlangWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        new SlangWord().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Button btnAdd;
    private Button btnDelete;
    private Button btnEdit;
    private Button btnExit;
    private Button btnExport;
    private Button btnHistory;
    private Button btnRandom;
    private Button btnReset;
    private Button btnSearchDefinition;
    private Button btnSearchSlang;
    private JPanel jPanel1;
    private JRadioButton jRadioDefinition;
    private JRadioButton jRadioSlang;
    private JScrollPane jScrollPane1;
    private JTable jTableSlangWord;
    private Label label1;
    private Label label2;
    private Label label3;
    private Label label4;
    private TextField txtDefinition;
    private TextField txtSlang;
    private TextField txtkeyWord;
    // End of variables declaration//GEN-END:variables

}
